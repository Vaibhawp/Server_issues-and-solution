Docker Compose is a tool that helps you define and run multi-container Docker applications. It's used to manage services, networks, and volumes in a single YAML file.
=====================================================================================================================================
Volumes are persistent data stores for containers, created and managed by Docker. You can create a volume explicitly using the docker volume create command, or Docker can create a volume during container or service creation.

When you create a volume, it's stored within a directory on the Docker host. When you mount the volume into a container, this directory is what's mounted into the container. This is similar to the way that bind mounts work, except that volumes are managed by Docker and are isolated from the core functionality of the host machine.
=========================================================================================================================================

#### When to Use Volumes
1. Advantages of Volumes Over Bind Mounts:
   - Easier to back up or migrate.
   - Managed using Docker CLI or API.
   - Compatible with Linux and Windows containers.
   - Safer sharing among multiple containers.
   - Pre-population of content by containers or builds.
   - Ideal for applications requiring high-performance I/O.

2. Disadvantages:
   - Not suitable if you need access to files from the host; use bind mounts in such cases.

3. Performance Benefits:
   - Volumes avoid increasing container size.
   - Faster than writing into a containerâ€™s writable layer, which requires storage drivers.

4. Temporary Data:
   - Use `tmpfs` mounts for non-persistent state data to enhance performance.

5. Lifecycle Management:
   - Volumes persist even when containers are removed.
   - Unused volumes can be cleaned using `docker volume prune`.

6. Mounting Behavior:
   - Mounting over existing data obscures pre-existing files.
   - Empty volumes propagate existing container files by default unless the `volume-nocopy` option is used.

#### Named vs. Anonymous Volumes
1. Named Volumes:
   - Explicitly named and reusable between containers.
2. Anonymous Volumes:
   - Randomly named, unique within the host.
   - Persist unless the `--rm` flag is used during container creation.
   - Require manual mounting by volume ID for reuse across containers.

#### Mount Syntax and Options
1. Preferred Syntax:
   - Use `--mount` for clarity and access to all options.
   - Example: 
     ```bash
     docker run --mount type=volume,src=<volume-name>,dst=<mount-path>
     ```
2. Key Features of `--mount`:
   - Supports volume driver options.
   - Allows mounting subdirectories.
   - Enables volume mounting in Swarm services.

------------------------------------------------------------------------------------------------------------------------------------------------------------------------

    frontend:
    image: frontend
    build:
      context: ./.frontend/
      dockerfile: Dockerfile
      args:
        REACT_APP_BACKEND_BASE_URL: https://bridge.wassel.ai/api
        REACT_APP_MODELS_PROXY_URL: https://bridge.wassel.ai/models/proxy
    ports:
      - "3000:3000"
    networks:
      - api
    depends_on:
      - models_proxy
      - backend

   indexer:
    image: indexer
    build:
      context: ./indexer/
      dockerfile: Dockerfile
    volumes:
      - /home/data/repos:/home/data/repos
      - /root/.paddleocr:/root/.paddleocr
    ports:
      - "8001:8080"
    networks:
      - api
      - milvus
    env_file:
      - ./indexer/.env.prod
    depends_on:
      - milvus-standalone

  summarizer:
    image: summarizer
    build:
      context: ./summarizer/
      dockerfile: Dockerfile
    ports:
      - "5000:5000"
    volumes:
      - /home/data/repos:/home/data/repos
      - /home/temp_documents:/app/temp_documents
    networks:
      - api
    env_file:
      - ./summarizer/.env.prod

    models_proxy:
    image: ghcr.io/berriai/litellm:main-latest
    ports:
      - "4000:4000"
    volumes:
      - ./models-proxy-prod-config.yml:/app/config.yaml
    command: [ "--config", "/app/config.yaml", "--port", "4000", "--num_workers", "8" ]
    networks:
      - api

  _backend:
    image: .backend
    build:
      context: ./.backend/
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - /home/data/repos:/home/data/repos
      - /home/data/conversations:/home/data/conversations
      - ~/.aws:/root/.aws
    networks:
      - api
    depends_on:
      - summarizer
      - _models_proxy
    env_file:
      - ./.backend/.env.prod

  etcd:
    container_name: milvus-etcd
    image: quay.io/coreos/etcd:v3.5.5
    environment:
      - ETCD_AUTO_COMPACTION_MODE=revision
      - ETCD_AUTO_COMPACTION_RETENTION=1000
      - ETCD_QUOTA_BACKEND_BYTES=4294967296
      - ETCD_SNAPSHOT_COUNT=50000
    volumes:
      - /home/milvus/etcd:/etcd
    command: etcd -advertise-client-urls=http://127.0.0.1:2379 -listen-client-urls http://0.0.0.0:2379 --data-dir /etcd
    healthcheck:
      test: ["CMD", "etcdctl", "endpoint", "health"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - milvus

  minio:
    container_name: milvus-minio
    image: minio/minio:RELEASE.2023-03-20T20-16-18Z
    environment:
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
    ports:
      - "9001:9001"
      - "9000:9000"
    volumes:
      - /home/milvus/minio:/minio_data
    command: minio server /minio_data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - milvus

  milvus-standalone:
    container_name: milvus-standalone
    image: milvusdb/milvus:v2.4.15
    command: ["milvus", "run", "standalone"]
    security_opt:
      - seccomp:unconfined
    environment:
      ETCD_ENDPOINTS: etcd:2379
      MINIO_ADDRESS: minio:9000
    volumes:
      - /home/milvus/milvus:/var/lib/milvus
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9091/healthz"]
      interval: 30s
      start_period: 90s
      timeout: 20s
      retries: 3
    ports:
      - "19530:19530"
      - "9091:9091"
    depends_on:
      - "etcd"
      - "minio"
    networks:
      - milvus

networks:
  api:
    driver: bridge
  milvus:
    name: milvus
